//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurrencyToTexyConverter.Client.Wpf.CurrencyConversionService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyDto", Namespace="http://schemas.datacontract.org/2004/07/CurrencyToTextConverterService")]
    [System.SerializableAttribute()]
    public partial class CurrencyDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DollarsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Cents {
            get {
                return this.CentsField;
            }
            set {
                if ((this.CentsField.Equals(value) != true)) {
                    this.CentsField = value;
                    this.RaisePropertyChanged("Cents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Dollars {
            get {
                return this.DollarsField;
            }
            set {
                if ((this.DollarsField.Equals(value) != true)) {
                    this.DollarsField = value;
                    this.RaisePropertyChanged("Dollars");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyConversionFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyToTextConverterService")]
    [System.SerializableAttribute()]
    public partial class CurrencyConversionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CurrencyConversionService.ICurrencyConversionService")]
    public interface ICurrencyConversionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertToText", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertToTextResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CurrencyToTexyConverter.Client.Wpf.CurrencyConversionService.CurrencyConversionFault), Action="http://tempuri.org/ICurrencyConversionService/ConvertToTextCurrencyConversionFaul" +
            "tFault", Name="CurrencyConversionFault", Namespace="http://schemas.datacontract.org/2004/07/CurrencyToTextConverterService")]
        string ConvertToText(CurrencyToTexyConverter.Client.Wpf.CurrencyConversionService.CurrencyDto value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertToText", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertToTextResponse")]
        System.Threading.Tasks.Task<string> ConvertToTextAsync(CurrencyToTexyConverter.Client.Wpf.CurrencyConversionService.CurrencyDto value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyConversionServiceChannel : CurrencyToTexyConverter.Client.Wpf.CurrencyConversionService.ICurrencyConversionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyConversionServiceClient : System.ServiceModel.ClientBase<CurrencyToTexyConverter.Client.Wpf.CurrencyConversionService.ICurrencyConversionService>, CurrencyToTexyConverter.Client.Wpf.CurrencyConversionService.ICurrencyConversionService {
        
        public CurrencyConversionServiceClient() {
        }
        
        public CurrencyConversionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyConversionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConversionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConversionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ConvertToText(CurrencyToTexyConverter.Client.Wpf.CurrencyConversionService.CurrencyDto value) {
            return base.Channel.ConvertToText(value);
        }
        
        public System.Threading.Tasks.Task<string> ConvertToTextAsync(CurrencyToTexyConverter.Client.Wpf.CurrencyConversionService.CurrencyDto value) {
            return base.Channel.ConvertToTextAsync(value);
        }
    }
}
